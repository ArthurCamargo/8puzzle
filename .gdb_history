n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
b util.cpp:42
c
p newStrings[i]
n
b util.cpp67
b util.cpp:67
r
c
c
p initialState 
p finalState 
n
exit 
set args -bfs 0 6 1 7 4 2 3 8 5, 5 0 2 6 4 8 1 7 3, 2 4 7 0 3 6 8 1 5
show args 
b Instance 
c 
r 
b State 
r 
c
c
local 
info 
list 
r
r 
r 
r 
r 
r 
c 
c 
c 
c 
c 
c 
c 
p newInitialState 
p newFinalState 
n 
c 
c 
list 
bt 
info local 
local 
info locals 
list 
exit 
set args -bfs 0 6 1 7 4 2 3 8 5, 5 0 2 6 4 8 1 7 3, 2 4 7 0 3 6 8 1 5
r 
list 
bt full 
:q 
exit 
set args -bfs 0 6 1 7 4 2 3 8 5
show args 
r 
bt full
exit 
set args -bfs 0 6 1 7 4 2 3 8 5
run 
bt full 
exit 
set args -bfs 0 6 1 7 4 2 3 8 5
show args 
b algorithm.cpp:25
b algorithm.cpp:25
exit 
b algorithm.cpp:25
set args 
set args -bfs 0 6 1 7 4 2 3 8 5
show args 
ru
p this->open 
p this->explored 
p auto search = this->explored.find(this->actualState)
p this->explored.find(this->actualState)
p this->explored.find(actualState)
p this->explored
n 
n
p auto 
p search 
p this->explored.end() 
p search == this->explored.end() 
 n 
n
p this->explored 
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
p this->explored 
n
p search 
p search == this->explored.end() 
exit 
set args -bfs 0 6 1 7 4 2 3 8 5
b algorithm.cpp 
b algorithm.cpp:25
r
n
n
p search 
n
n
p this->explored 
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
p actualState 
exit 
set args -bfs 0 6 1 7 4 2 3 8 5
b algorithm.cpp;22 
b algorithm.cpp:22 
r 
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
p actualState 
hash(actualState)
actualState.hash()
p this->explored 
n
p search 
p this->explored.end() 
p search == this->explored.end()
n
n
p this->explored 
c
p this->explored 
p actualState 
c 
p actualState 
rb 
remove breakpoint 
breakpoint list 
list breakpoint 
help break
list break 
list b 
exit 
set args -bfs 0 6 1 7 4 2 3 8 5
run 
bt full 
exit 
exit 
set args -astar 0 6 1 7 4 2 3 8 5
show args 
run 
bt full 
exit 
set args -astar 0 6 1 7 4 2 3 8 5
run 
b createProblem 
r 
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
b util.cpp:48
r 
c 
exit 
